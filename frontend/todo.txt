D               comment redux change
D               delete p image delete krna h 
D               edit redux
D               delete comment
D               comment reply and like
D               user post page p post dikhani h 
                user can edit profile
                user can only caption or only image


                messaging
                audio calling video calling
                timing issue
                % complete your profile
                progress bar
                follower following
                post validation
                latest post vise
                redirect to home after creating post
                create error page
                if a user comments reload every other user
                post owner can delete comment
                admin dashboard
import React, { useEffect, useState } from "react";
import { useDispatch, useSelector } from "react-redux";
import {
  fetchMessages,
  sendMessage,
} from "../../redux/message/messagesThunkReducers";
import MessageHeader from "./MessageHeader";
import { useSocketContext } from "../../context/SocketProvider";
import { getOtherUserName } from "../../utils/controllers";
import { fetchConversation } from "../../redux/conversation/conversationThunkReducers";
import axiosInstance from "../../config/axiosConfig";
import { BACKENDURL } from "../../config/data";

const MessageContainer = ({ selectedConversationId }) => {
  const socket = useSocketContext();
  const loggedinuser = useSelector((store) => store.user.user.userid);
  const messages = useSelector((state) => state.messages.messages);
  const [newMessage, setNewMessage] = useState("");
  const [Conversation, setConversation] = useState(null);
  const [otherParticipant, setotherParticipant] = useState(null);
  const dispatch = useDispatch();

  useEffect(() => {
    const fetchConversation = async (selectedConversationId) => {
      const response = await axiosInstance.get(
        `${BACKENDURL}api/chat/${selectedConversationId}`
      );
      setConversation(response.data.conversation);
      
    if (response.data.conversation) {
      const otherparticipant = getOtherUserName(loggedinuser, response.data.conversation.participants);
      setotherParticipant(otherparticipant);
    }
    };
    if (selectedConversationId) {
      fetchConversation(selectedConversationId);
    }

  }, [selectedConversationId]);

  useEffect(() => {
    if (selectedConversationId) dispatch(fetchMessages(selectedConversationId));
  }, [selectedConversationId, dispatch]);

  useEffect(() => {
    if (socket) {
      socket.on("message", (messageData) => {
        console.log(messageData)
        // if (messageData.conversationId === selectedConversationId) {
        //   // Dispatch an action to update the message list in Redux
        //   dispatch({ type: "ADD_MESSAGE", payload: messageData });
        // }
      });

      return () => {
        socket.off("message");
      };
    }
  }, [socket, selectedConversationId, dispatch]);

  const handleSendMessage = (e) => {
    e.preventDefault();
    if (newMessage.trim()) {
      console.log(otherParticipant)
      const messageData = { otherParticipant, newMessage };
      dispatch(sendMessage({ selectedConversationId, newMessage }));
      // if (socket) {
      //   socket.emit("message", messageData);
      // }
      setNewMessage("");
    }
  };

  return (
    <div className="flex flex-col h-[89vh] w-full md:w-[70%] bg-white rounded-r-lg shadow-lg">
      <div className="p-4 bg-gray-100 border-b border-gray-200">
        <h3 className="text-lg font-semibold">
          {selectedConversationId ? (
            <MessageHeader selectedConversationId={selectedConversationId} />
          ) : (
            "Select a conversation to send a message"
          )}
        </h3>
      </div>
      <div className="flex-1 overflow-y-auto p-4">
        {selectedConversationId ? (
          messages.map((message, idx) => (
            <div
              key={idx}
              className={`flex ${
                message.sender === loggedinuser
                  ? "justify-end"
                  : "justify-start"
              }`}
            >
              <div
                className={`bg-${
                  message.sender === "me" ? "blue-100" : "gray-100"
                } max-w-xs px-4 py-2 rounded-full m-1`}
              >
                {message.content}
              </div>
            </div>
          ))
        ) : (
          <div className="text-center text-gray-500 mt-4">
            No conversation selected.
          </div>
        )}
      </div>
      {selectedConversationId && (
        <form
          className="flex items-center justify-between p-4 border-t border-gray-200"
          onSubmit={handleSendMessage}
        >
          <input
            type="text"
            value={newMessage}
            onChange={(e) => setNewMessage(e.target.value)}
            placeholder="Type a message..."
            className="flex-1 rounded-full border-gray-300 p-2 mr-4 focus:outline-none focus:ring focus:ring-blue-300"
          />
          <button
            type="submit"
            className="bg-blue-500 text-white rounded-full px-6 py-2 font-semibold hover:bg-blue-600 focus:outline-none focus:ring focus:ring-blue-300"
          >
            Send
          </button>
        </form>
      )}
    </div>
  );
};

export default MessageContainer;


import React, { useEffect, useRef, useState } from "react";
import { useParams } from "react-router-dom";
import { useSocketContext } from "../context/SocketProvider";
import { useDispatch } from "react-redux";
import { receiveCall } from "../redux/call/callSlice";

const VideoCall = () => {
  const { otherParticipantId } = useParams();
  const localVideoRef = useRef(null);
  const remoteVideoRef = useRef(null);
  const { socket } = useSocketContext();
  const [peerConnection, setPeerConnection] = useState(null);
  // const [offeraccepted, setofferaccepted] = useState(true);
  const dispatch = useDispatch();

  useEffect(() => {
    const pc = new RTCPeerConnection({
      iceServers: [{ urls: "stun:stun.l.google.com:19302" }],
    });
    console.log(pc)
    setPeerConnection(pc);

    const handleIceCandidate = (event) => {
      console.log("sending ice candidate");

      if (event?.candidate) {
        socket.emit("ice-candidate", {
          candidate: event?.candidate,
          to: otherParticipantId,
        });
      }
    };

    const handleTrackEvent = (event) => {
      console.log("recieving remote video");
      remoteVideoRef.current.srcObject = event?.streams[0];
    };

    pc.addEventListener("icecandidate", handleIceCandidate);
    pc.addEventListener("track", handleTrackEvent);

    const handleOffer = async (data) => {
      console.log("recived offer");
      console.log(data.caller)
      dispatch(receiveCall(data?.caller));
      if (data?.from === otherParticipantId) {
        await pc.setRemoteDescription(new RTCSessionDescription(data?.offer));
        const answer = await pc.createAnswer();
        await pc.setLocalDescription(answer);
        console.log("sending answer");
        socket.emit("answer", {
          answer,
          to: otherParticipantId,
        });
        // setofferaccepted(true)
      }
    };

    const handleAnswer = async (data) => {
      console.log("recieved answer");
      if (data?.from === otherParticipantId) {
        await pc.setRemoteDescription(new RTCSessionDescription(data?.answer));
      }
    };

    const handleIceCandidateReceived = async (data) => {
      console.log("recieved ice candidate");
      console.log(data);
      // console.log(offeraccepted)
      // if(offeraccepted){
      if (data?.from === otherParticipantId) {
        try {
          await pc.addIceCandidate(new RTCIceCandidate(data?.candidate));
        } catch (error) {
          console.error("Error adding received ice candidate", error);
        }
      }
      // }
    };

    if (socket) {
      socket.on("offer", handleOffer);
      socket.on("answer", handleAnswer);
      socket.on("ice-candidate", handleIceCandidateReceived);
    }

    return () => {
      pc.close();
      setPeerConnection(null);
      if (socket) {
        socket.off("offer", handleOffer);
        socket.off("answer", handleAnswer);
        socket.off("ice-candidate", handleIceCandidateReceived);
      }
    };
  }, [socket, otherParticipantId]);

  useEffect(() => {
    const getLocalStream = async () => {
      try {
        const localStream = await navigator.mediaDevices.getUserMedia({
          video: true,
          audio: true,
        });
        localVideoRef.current.srcObject = localStream;

        localStream.getTracks().forEach((track) => {
          if (peerConnection && peerConnection.signalingState !== "closed") {
            peerConnection.addTrack(track, localStream);
          }
        });
      } catch (error) {
        console.error("Error accessing media devices.", error);
      }
    };

    if (peerConnection) {
      getLocalStream();
    }

    return () => {
      if (localVideoRef.current && localVideoRef.current.srcObject) {
        localVideoRef.current.srcObject
          .getTracks()
          .forEach((track) => track.stop());
      }
    };
  }, [peerConnection]);

  const startCall = async () => {
    console.log("sending offer");
    if (peerConnection && socket) {
      const offer = await peerConnection.createOffer();
      await peerConnection.setLocalDescription(offer);
      socket.emit("offer", {
        offer: offer,
        to: otherParticipantId,
      });

      // setofferaccepted(true)
    }
  };

  const endCall = () => {
    if (peerConnection) {
      peerConnection.close();
      setPeerConnection(null);
    }

    if (localVideoRef.current && localVideoRef.current.srcObject) {
      localVideoRef.current.srcObject
        .getTracks()
        .forEach((track) => track.stop());
      localVideoRef.current.srcObject = null;
    }

    if (remoteVideoRef.current) {
      remoteVideoRef.current.srcObject = null;
    }

    if (socket) {
      socket.emit("end-call", {
        to: otherParticipantId,
      });
    }
  };

  return (
    <div className="pt-24 bg-black/95 h-screen flex flex-col">
      <div className="relative flex-grow rounded-lg h-[90%]">
        <div className="relative h-[90%]">
          <video
            ref={remoteVideoRef}
            className="w-full h-[90%] bg-red-300"
            autoPlay
          ></video>
          <div className="absolute inset-0 flex items-end justify-end md:p-4 mr-8 md:mr-20">
            <video
              ref={localVideoRef}
              className="h-36 w-32 md:w-44 md:h-44 md:rounded-full md:object-cover"
              autoPlay
              muted
            ></video>
          </div>
        </div>
        <div className="flex w-full justify-center">
          <div className="flex w-72 justify-between">
            <button
              className="bg-blue-600 text-white py-2 px-6 rounded-full hover:bg-blue-700 focus:ring-2 focus:ring-blue-500"
              type="button"
              onClick={startCall}
            >
              Start Call
            </button>
            <button
              className="bg-red-600 text-white py-2 px-6 rounded-full hover:bg-red-700 focus:ring-2 focus:ring-red-500"
              type="button"
              onClick={endCall}
            >
              End Call
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default VideoCall;

import React, { createContext, useContext, useEffect, useState } from 'react';
import { useSocketContext } from "./SocketProvider"; // Ensure this is correctly imported
import { useDispatch, useSelector } from 'react-redux';
import { receiveCall } from "../redux/call/callSlice";

const WebRTCContext = createContext();

export const WebRTCProvider = ({ children }) => {
  const { socket } = useSocketContext();
  const dispatch = useDispatch();
  const userId = useSelector(state => state.user.user.userId); // Make sure this aligns with your state structure
  const [peerConnection, setPeerConnection] = useState(null);

  useEffect(() => {
    const pc = new RTCPeerConnection({
      iceServers: [{ urls: "stun:stun.l.google.com:19302" }]
    });
    console.log("PeerConnection created", pc);

    // Event listeners for peerConnection
    const handleIceCandidate = event => {
      console.log("sending ice candidate");
      if (event.candidate) {
        socket.emit("ice-candidate", { candidate: event.candidate, to: userId });
      }
    };

    const handleTrackEvent = event => {
      dispatch(receiveCall({ stream: event.streams[0] }));
    };

    pc.onicecandidate = handleIceCandidate;
    pc.ontrack = handleTrackEvent;

    setPeerConnection(pc);

    // Cleanup on unmount
    return () => {
      pc.close();
      console.log("PeerConnection closed");
      setPeerConnection(null);
    };
  }, [socket, userId, dispatch]);

  // Exposing actions and state through context
  const startCall = async (otherUserId) => {
    const offer = await peerConnection.createOffer();
    await peerConnection.setLocalDescription(offer);
    socket.emit("offer", { offer, to: otherUserId });
  };

  const answerCall = async (offer, from) => {
    await peerConnection.setRemoteDescription(new RTCSessionDescription(offer));
    const answer = await peerConnection.createAnswer();
    await peerConnection.setLocalDescription(answer);
    socket.emit("answer", { answer, to: from });
  };

  const endCall = () => {
    peerConnection.close();
    setPeerConnection(null);
  };

  return (
    <WebRTCContext.Provider value={{ peerConnection, startCall, answerCall, endCall }}>
      {children}
    </WebRTCContext.Provider>
  );
};

export const useWebRTCContext = () => useContext(WebRTCContext);

